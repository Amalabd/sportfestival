//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class RegisterModel implements IRegisterModel {
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    schoolname?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.schoolname = _data["schoolname"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["schoolname"] = this.schoolname;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterModel {
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    schoolname?: string | undefined;
    password?: string | undefined;
}

export class LoginModel implements ILoginModel {
    username?: User | undefined;
    password?: string | undefined;
    schoolID?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] ? User.fromJS(_data["username"]) : <any>undefined;
            this.password = _data["password"];
            this.schoolID = _data["schoolID"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username ? this.username.toJSON() : <any>undefined;
        data["password"] = this.password;
        data["schoolID"] = this.schoolID;
        return data;
    }
}

export interface ILoginModel {
    username?: User | undefined;
    password?: string | undefined;
    schoolID?: string | undefined;
}

export class IdentityUserOfGuid implements IIdentityUserOfGuid {
    id?: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IIdentityUserOfGuid {
    id?: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class User extends IdentityUserOfGuid implements IUser {
    first?: string | undefined;
    last?: string | undefined;
    role?: RoleType;
    created!: Date;
    updated!: Date;

    constructor(data?: IUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.first = _data["first"];
            this.last = _data["last"];
            this.role = _data["role"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first"] = this.first;
        data["last"] = this.last;
        data["role"] = this.role;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUser extends IIdentityUserOfGuid {
    first?: string | undefined;
    last?: string | undefined;
    role?: RoleType;
    created: Date;
    updated: Date;
}

export enum RoleType {
    Student = "Student",
    Tutor = "Tutor",
    CampaignManager = "CampaignManager",
    CampaignJudge = "CampaignJudge",
    User = "User",
}

export class ResultModelOfSchool implements IResultModelOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: School | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfSchool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? School.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfSchool {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfSchool();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: School | undefined;
    messages?: Message[] | undefined;
}

export class EntityOfGuid implements IEntityOfGuid {
    id?: string;
    created!: Date;
    updated!: Date;

    constructor(data?: IEntityOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEntityOfGuid {
    id?: string;
    created: Date;
    updated: Date;
}

export class School extends EntityOfGuid implements ISchool {
    name?: string;
    shortName?: string;
    comment?: string;
    managerId?: string | undefined;
    judgeIds?: Tutor[] | undefined;
    studentIds?: string[];

    constructor(data?: ISchool) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.comment = _data["comment"];
            this.managerId = _data["managerId"];
            if (Array.isArray(_data["judgeIds"])) {
                this.judgeIds = [] as any;
                for (let item of _data["judgeIds"])
                    this.judgeIds!.push(Tutor.fromJS(item));
            }
            if (Array.isArray(_data["studentIds"])) {
                this.studentIds = [] as any;
                for (let item of _data["studentIds"])
                    this.studentIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): School {
        data = typeof data === 'object' ? data : {};
        let result = new School();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["comment"] = this.comment;
        data["managerId"] = this.managerId;
        if (Array.isArray(this.judgeIds)) {
            data["judgeIds"] = [];
            for (let item of this.judgeIds)
                data["judgeIds"].push(item.toJSON());
        }
        if (Array.isArray(this.studentIds)) {
            data["studentIds"] = [];
            for (let item of this.studentIds)
                data["studentIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISchool extends IEntityOfGuid {
    name?: string;
    shortName?: string;
    comment?: string;
    managerId?: string | undefined;
    judgeIds?: Tutor[] | undefined;
    studentIds?: string[];
}

export class Tutor extends User implements ITutor {
    classId?: string | undefined;
    schoolId?: string;

    constructor(data?: ITutor) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.classId = _data["classId"];
            this.schoolId = _data["schoolId"];
        }
    }

    static override fromJS(data: any): Tutor {
        data = typeof data === 'object' ? data : {};
        let result = new Tutor();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classId"] = this.classId;
        data["schoolId"] = this.schoolId;
        super.toJSON(data);
        return data;
    }
}

export interface ITutor extends IUser {
    classId?: string | undefined;
    schoolId?: string;
}

export class Message implements IMessage {
    errorMessage?: string | undefined;
    errorType?: ErrorResult | undefined;
    errorSeverity?: Severity | undefined;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["error.message"];
            this.errorType = _data["error.type"];
            this.errorSeverity = _data["error.severity"];
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error.message"] = this.errorMessage;
        data["error.type"] = this.errorType;
        data["error.severity"] = this.errorSeverity;
        return data;
    }
}

export interface IMessage {
    errorMessage?: string | undefined;
    errorType?: ErrorResult | undefined;
    errorSeverity?: Severity | undefined;
}

export enum ErrorResult {
    InternalException = "InternalException",
    InvalidModel = "InvalidModel",
    InvalidCredentials = "InvalidCredentials",
    InvalidToken = "InvalidToken",
    InvalidRole = "InvalidRole",
    InvalidUser = "InvalidUser",
    InvalidPassword = "InvalidPassword",
    InvalidEmail = "InvalidEmail",
    InvalidUsername = "InvalidUsername",
    InvalidOldPassword = "InvalidOldPassword",
    InvalidNewPassword = "InvalidNewPassword",
    InvalidModelState = "InvalidModelState",
    PasswordChangeFailed = "PasswordChangeFailed",
    AccountLocked = "AccountLocked",
    UserNotFound = "UserNotFound",
    UserCreationFailed = "UserCreationFailed",
    RoleCreationFailed = "RoleCreationFailed",
    Validation = "Validation",
    InvalidId = "InvalidId",
}

export enum Severity {
    Verbose = "Verbose",
    Debug = "Debug",
    Information = "Information",
    Warning = "Warning",
    Error = "Error",
    Fatal = "Fatal",
}

export class ResultModelOfPageOfClass implements IResultModelOfPageOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfClass | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfClass.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfClass | undefined;
    messages?: Message[] | undefined;
}

export class PageOfClass implements IPageOfClass {
    number?: number;
    size?: number;
    total?: number;
    data?: Class[];

    constructor(data?: IPageOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Class.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfClass {
    number?: number;
    size?: number;
    total?: number;
    data?: Class[];
}

export class Class extends EntityOfGuid implements IClass {
    name?: string;
    short?: string;
    comment?: string;
    tutorId?: string | undefined;
    roomId?: string | undefined;
    schoolId?: string | undefined;
    locationId?: string | undefined;

    constructor(data?: IClass) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.comment = _data["comment"];
            this.tutorId = _data["tutorId"];
            this.roomId = _data["roomId"];
            this.schoolId = _data["schoolId"];
            this.locationId = _data["locationId"];
        }
    }

    static override fromJS(data: any): Class {
        data = typeof data === 'object' ? data : {};
        let result = new Class();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["comment"] = this.comment;
        data["tutorId"] = this.tutorId;
        data["roomId"] = this.roomId;
        data["schoolId"] = this.schoolId;
        data["locationId"] = this.locationId;
        super.toJSON(data);
        return data;
    }
}

export interface IClass extends IEntityOfGuid {
    name?: string;
    short?: string;
    comment?: string;
    tutorId?: string | undefined;
    roomId?: string | undefined;
    schoolId?: string | undefined;
    locationId?: string | undefined;
}

export class ResultModelOfTutor implements IResultModelOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Tutor | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfTutor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Tutor.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfTutor {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfTutor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Tutor | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfClass implements IResultModelOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Class | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Class.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Class | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfStudent implements IResultModelOfPageOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfStudent | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfStudent.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfStudent {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfStudent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfStudent | undefined;
    messages?: Message[] | undefined;
}

export class PageOfStudent implements IPageOfStudent {
    number?: number;
    size?: number;
    total?: number;
    data?: Student[];

    constructor(data?: IPageOfStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Student.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfStudent {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfStudent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfStudent {
    number?: number;
    size?: number;
    total?: number;
    data?: Student[];
}

export class Student extends User implements IStudent {
    classId?: string | undefined;
    schoolId?: string;

    constructor(data?: IStudent) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.classId = _data["classId"];
            this.schoolId = _data["schoolId"];
        }
    }

    static override fromJS(data: any): Student {
        data = typeof data === 'object' ? data : {};
        let result = new Student();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classId"] = this.classId;
        data["schoolId"] = this.schoolId;
        super.toJSON(data);
        return data;
    }
}

export interface IStudent extends IUser {
    classId?: string | undefined;
    schoolId?: string;
}

export class ResultModelOfIEnumerableOfClass implements IResultModelOfIEnumerableOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Class[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Class.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Class[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfIEnumerableOfGuid implements IResultModelOfIEnumerableOfGuid {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: string[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfGuid {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: string[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfLong implements IResultModelOfLong {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: number;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfLong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfLong {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfLong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfLong {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: number;
    messages?: Message[] | undefined;
}

export class OperationBase implements IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;

    constructor(data?: IOperationBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): OperationBase {
        data = typeof data === 'object' ? data : {};
        let result = new OperationBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        return data;
    }
}

export interface IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;
}

export class Operation extends OperationBase implements IOperation {
    value?: any | undefined;

    constructor(data?: IOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOperation extends IOperationBase {
    value?: any | undefined;
}

export class ResultModelOfObject implements IResultModelOfObject {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: any | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfObject {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfObject {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: any | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfIEnumerableOfAuditLog implements IResultModelOfIEnumerableOfAuditLog {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: AuditLog[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfAuditLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AuditLog.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfAuditLog {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfAuditLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfAuditLog {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: AuditLog[] | undefined;
    messages?: Message[] | undefined;
}

export class AuditLog implements IAuditLog {
    id?: string;
    entityId?: string;
    entityType?: string | undefined;
    action?: string;
    changedBy?: string;
    timestamp?: Date;
    changes?: string;

    constructor(data?: IAuditLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.entityId = _data["entityId"];
            this.entityType = _data["entityType"];
            this.action = _data["action"];
            this.changedBy = _data["changedBy"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            this.changes = _data["changes"];
        }
    }

    static fromJS(data: any): AuditLog {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["entityId"] = this.entityId;
        data["entityType"] = this.entityType;
        data["action"] = this.action;
        data["changedBy"] = this.changedBy;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["changes"] = this.changes;
        return data;
    }
}

export interface IAuditLog {
    id?: string;
    entityId?: string;
    entityType?: string | undefined;
    action?: string;
    changedBy?: string;
    timestamp?: Date;
    changes?: string;
}

export class ResultModelOfPageOfDiscipline implements IResultModelOfPageOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfDiscipline | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfDiscipline.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfDiscipline | undefined;
    messages?: Message[] | undefined;
}

export class PageOfDiscipline implements IPageOfDiscipline {
    number?: number;
    size?: number;
    total?: number;
    data?: Discipline[];

    constructor(data?: IPageOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Discipline.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfDiscipline {
    number?: number;
    size?: number;
    total?: number;
    data?: Discipline[];
}

export class Discipline extends EntityOfGuid implements IDiscipline {
    name?: string;
    short?: string;
    comment?: string;
    judgeId?: string | undefined;
    locationId?: Location | undefined;

    constructor(data?: IDiscipline) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.comment = _data["comment"];
            this.judgeId = _data["judgeId"];
            this.locationId = _data["locationId"] ? Location.fromJS(_data["locationId"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Discipline {
        data = typeof data === 'object' ? data : {};
        let result = new Discipline();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["comment"] = this.comment;
        data["judgeId"] = this.judgeId;
        data["locationId"] = this.locationId ? this.locationId.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IDiscipline extends IEntityOfGuid {
    name?: string;
    short?: string;
    comment?: string;
    judgeId?: string | undefined;
    locationId?: Location | undefined;
}

export class Location extends EntityOfGuid implements ILocation {
    name?: string;
    short?: string;
    comment?: string;
    classIds?: string[];
    disciplineIds?: string[] | undefined;

    constructor(data?: ILocation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.comment = _data["comment"];
            if (Array.isArray(_data["classIds"])) {
                this.classIds = [] as any;
                for (let item of _data["classIds"])
                    this.classIds!.push(item);
            }
            if (Array.isArray(_data["disciplineIds"])) {
                this.disciplineIds = [] as any;
                for (let item of _data["disciplineIds"])
                    this.disciplineIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["comment"] = this.comment;
        if (Array.isArray(this.classIds)) {
            data["classIds"] = [];
            for (let item of this.classIds)
                data["classIds"].push(item);
        }
        if (Array.isArray(this.disciplineIds)) {
            data["disciplineIds"] = [];
            for (let item of this.disciplineIds)
                data["disciplineIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ILocation extends IEntityOfGuid {
    name?: string;
    short?: string;
    comment?: string;
    classIds?: string[];
    disciplineIds?: string[] | undefined;
}

export class ResultModelOfIEnumerableOfDiscipline implements IResultModelOfIEnumerableOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Discipline[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Discipline.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Discipline[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfDiscipline implements IResultModelOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Discipline | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Discipline.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Discipline | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfEntry implements IResultModelOfPageOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfEntry | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfEntry.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfEntry | undefined;
    messages?: Message[] | undefined;
}

export class PageOfEntry implements IPageOfEntry {
    number?: number;
    size?: number;
    total?: number;
    data?: Entry[];

    constructor(data?: IPageOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Entry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfEntry {
    number?: number;
    size?: number;
    total?: number;
    data?: Entry[];
}

export class Entry extends EntityOfGuid implements IEntry {
    studentId?: string | undefined;
    disciplineId?: string | undefined;
    score?: number;
    note?: string;

    constructor(data?: IEntry) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.studentId = _data["studentId"];
            this.disciplineId = _data["disciplineId"];
            this.score = _data["score"];
            this.note = _data["note"];
        }
    }

    static override fromJS(data: any): Entry {
        data = typeof data === 'object' ? data : {};
        let result = new Entry();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studentId"] = this.studentId;
        data["disciplineId"] = this.disciplineId;
        data["score"] = this.score;
        data["note"] = this.note;
        super.toJSON(data);
        return data;
    }
}

export interface IEntry extends IEntityOfGuid {
    studentId?: string | undefined;
    disciplineId?: string | undefined;
    score?: number;
    note?: string;
}

export class ResultModelOfIEnumerableOfEntry implements IResultModelOfIEnumerableOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Entry[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Entry.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Entry[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfEntry implements IResultModelOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Entry | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Entry.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Entry | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfCampaignJudge implements IResultModelOfPageOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfCampaignJudge | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfCampaignJudge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfCampaignJudge.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfCampaignJudge {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfCampaignJudge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfCampaignJudge | undefined;
    messages?: Message[] | undefined;
}

export class PageOfCampaignJudge implements IPageOfCampaignJudge {
    number?: number;
    size?: number;
    total?: number;
    data?: CampaignJudge[];

    constructor(data?: IPageOfCampaignJudge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CampaignJudge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfCampaignJudge {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfCampaignJudge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfCampaignJudge {
    number?: number;
    size?: number;
    total?: number;
    data?: CampaignJudge[];
}

export class CampaignJudge extends User implements ICampaignJudge {
    disciplineId?: string | undefined;
    schoolId?: string;

    constructor(data?: ICampaignJudge) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.disciplineId = _data["disciplineId"];
            this.schoolId = _data["schoolId"];
        }
    }

    static override fromJS(data: any): CampaignJudge {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignJudge();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["disciplineId"] = this.disciplineId;
        data["schoolId"] = this.schoolId;
        super.toJSON(data);
        return data;
    }
}

export interface ICampaignJudge extends IUser {
    disciplineId?: string | undefined;
    schoolId?: string;
}

export class ResultModelOfIEnumerableOfCampaignJudge implements IResultModelOfIEnumerableOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignJudge[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfCampaignJudge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CampaignJudge.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfCampaignJudge {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfCampaignJudge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignJudge[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfCampaignJudge implements IResultModelOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignJudge | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfCampaignJudge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? CampaignJudge.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfCampaignJudge {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfCampaignJudge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfCampaignJudge {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignJudge | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfLocation implements IResultModelOfPageOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfLocation | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfLocation.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfLocation | undefined;
    messages?: Message[] | undefined;
}

export class PageOfLocation implements IPageOfLocation {
    number?: number;
    size?: number;
    total?: number;
    data?: Location[];

    constructor(data?: IPageOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Location.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfLocation {
    number?: number;
    size?: number;
    total?: number;
    data?: Location[];
}

export class ResultModelOfIEnumerableOfLocation implements IResultModelOfIEnumerableOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Location[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Location.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Location[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfLocation implements IResultModelOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Location | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Location.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Location | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfCampaignManager implements IResultModelOfPageOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfCampaignManager | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfCampaignManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfCampaignManager.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfCampaignManager {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfCampaignManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfCampaignManager | undefined;
    messages?: Message[] | undefined;
}

export class PageOfCampaignManager implements IPageOfCampaignManager {
    number?: number;
    size?: number;
    total?: number;
    data?: CampaignManager[];

    constructor(data?: IPageOfCampaignManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CampaignManager.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfCampaignManager {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfCampaignManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfCampaignManager {
    number?: number;
    size?: number;
    total?: number;
    data?: CampaignManager[];
}

export class CampaignManager extends User implements ICampaignManager {
    schoolId?: string;

    constructor(data?: ICampaignManager) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.schoolId = _data["schoolId"];
        }
    }

    static override fromJS(data: any): CampaignManager {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignManager();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schoolId"] = this.schoolId;
        super.toJSON(data);
        return data;
    }
}

export interface ICampaignManager extends IUser {
    schoolId?: string;
}

export class ResultModelOfIEnumerableOfCampaignManager implements IResultModelOfIEnumerableOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignManager[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfCampaignManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CampaignManager.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfCampaignManager {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfCampaignManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignManager[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfCampaignManager implements IResultModelOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignManager | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfCampaignManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? CampaignManager.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfCampaignManager {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfCampaignManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfCampaignManager {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: CampaignManager | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfTutor implements IResultModelOfPageOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfTutor | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfTutor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfTutor.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfTutor {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfTutor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfTutor | undefined;
    messages?: Message[] | undefined;
}

export class PageOfTutor implements IPageOfTutor {
    number?: number;
    size?: number;
    total?: number;
    data?: Tutor[];

    constructor(data?: IPageOfTutor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Tutor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfTutor {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfTutor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfTutor {
    number?: number;
    size?: number;
    total?: number;
    data?: Tutor[];
}

export class ResultModelOfPageOfSchool implements IResultModelOfPageOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfSchool | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfSchool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfSchool.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfSchool {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfSchool();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfSchool | undefined;
    messages?: Message[] | undefined;
}

export class PageOfSchool implements IPageOfSchool {
    number?: number;
    size?: number;
    total?: number;
    data?: School[];

    constructor(data?: IPageOfSchool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(School.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfSchool {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfSchool();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfSchool {
    number?: number;
    size?: number;
    total?: number;
    data?: School[];
}

export class ResultModelOfIEnumerableOfSchool implements IResultModelOfIEnumerableOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: School[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfSchool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(School.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfSchool {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfSchool();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfSchool {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: School[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfIEnumerableOfStudent implements IResultModelOfIEnumerableOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Student[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Student.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfStudent {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfStudent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Student[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfStudent implements IResultModelOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Student | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? Student.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfStudent {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfStudent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfStudent {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Student | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfIEnumerableOfTutor implements IResultModelOfIEnumerableOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Tutor[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfTutor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Tutor.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfTutor {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfTutor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfTutor {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: Tutor[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfUser implements IResultModelOfPageOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfUser | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfUser.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfUser | undefined;
    messages?: Message[] | undefined;
}

export class PageOfUser implements IPageOfUser {
    number?: number;
    size?: number;
    total?: number;
    data?: User[];

    constructor(data?: IPageOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfUser {
    number?: number;
    size?: number;
    total?: number;
    data?: User[];
}

export class ResultModelOfIEnumerableOfUser implements IResultModelOfIEnumerableOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: User[] | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfIEnumerableOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(User.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfIEnumerableOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfIEnumerableOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfIEnumerableOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: User[] | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfUser implements IResultModelOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: User | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? User.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: User | undefined;
    messages?: Message[] | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

// This file uses TypeScript 4.5 syntax