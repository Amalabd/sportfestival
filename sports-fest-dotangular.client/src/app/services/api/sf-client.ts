//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IClassClient {

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfClass>;

    post(ignoreNullProperties: boolean | undefined, entity: Class): Promise<ResultModelOfObject>;

    put(ignoreNullProperties: boolean | undefined, entity: Class): Promise<ResultModelOfObject>;

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject>;

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject>;

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Class): Promise<void>;

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void>;

    delete(id: string): Promise<ResultModelOfObject>;

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong>;
}

export class ClassClient implements IClassClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfClass> {
        let url_ = this.baseUrl + "/api/v1/data/classes?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (entities === null)
            throw new Error("The parameter 'entities' cannot be null.");
        else if (entities !== undefined)
            url_ += "entities=" + encodeURIComponent("" + entities) + "&";
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        if (sendNull === null)
            throw new Error("The parameter 'sendNull' cannot be null.");
        else if (sendNull !== undefined)
            url_ += "sendNull=" + encodeURIComponent("" + sendNull) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ResultModelOfPageOfClass> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfPageOfClass.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfPageOfClass>(null as any);
    }

    post(ignoreNullProperties: boolean | undefined, entity: Class): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/classes?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ResultModelOfString.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put(ignoreNullProperties: boolean | undefined, entity: Class): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/classes?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/classes?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (includeModels === null)
            throw new Error("The parameter 'includeModels' cannot be null.");
        else if (includeModels !== undefined)
            url_ += "includeModels=" + encodeURIComponent("" + includeModels) + "&";
        if (includeHttpCodes === null)
            throw new Error("The parameter 'includeHttpCodes' cannot be null.");
        else if (includeHttpCodes !== undefined)
            url_ += "includeHttpCodes=" + encodeURIComponent("" + includeHttpCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/classes/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Class): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/classes/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(id: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong> {
        let url_ = this.baseUrl + "/api/v1/data/classes/count?";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCount(_response);
        });
    }

    protected processGetCount(response: Response): Promise<ResultModelOfLong> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfLong.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfLong>(null as any);
    }
}

export interface IDisciplineClient {

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfDiscipline>;

    post(ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<ResultModelOfObject>;

    put(ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<ResultModelOfObject>;

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject>;

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject>;

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<void>;

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void>;

    delete(id: string): Promise<ResultModelOfObject>;

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong>;
}

export class DisciplineClient implements IDisciplineClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfDiscipline> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (entities === null)
            throw new Error("The parameter 'entities' cannot be null.");
        else if (entities !== undefined)
            url_ += "entities=" + encodeURIComponent("" + entities) + "&";
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        if (sendNull === null)
            throw new Error("The parameter 'sendNull' cannot be null.");
        else if (sendNull !== undefined)
            url_ += "sendNull=" + encodeURIComponent("" + sendNull) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ResultModelOfPageOfDiscipline> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfPageOfDiscipline.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfPageOfDiscipline>(null as any);
    }

    post(ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ResultModelOfString.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put(ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (includeModels === null)
            throw new Error("The parameter 'includeModels' cannot be null.");
        else if (includeModels !== undefined)
            url_ += "includeModels=" + encodeURIComponent("" + includeModels) + "&";
        if (includeHttpCodes === null)
            throw new Error("The parameter 'includeHttpCodes' cannot be null.");
        else if (includeHttpCodes !== undefined)
            url_ += "includeHttpCodes=" + encodeURIComponent("" + includeHttpCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Discipline): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(id: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong> {
        let url_ = this.baseUrl + "/api/v1/data/disciplines/count?";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCount(_response);
        });
    }

    protected processGetCount(response: Response): Promise<ResultModelOfLong> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfLong.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfLong>(null as any);
    }
}

export interface IEntryClient {

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfEntry>;

    post(ignoreNullProperties: boolean | undefined, entity: Entry): Promise<ResultModelOfObject>;

    put(ignoreNullProperties: boolean | undefined, entity: Entry): Promise<ResultModelOfObject>;

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject>;

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject>;

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Entry): Promise<void>;

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void>;

    delete(id: string): Promise<ResultModelOfObject>;

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong>;
}

export class EntryClient implements IEntryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfEntry> {
        let url_ = this.baseUrl + "/api/v1/data/entries?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (entities === null)
            throw new Error("The parameter 'entities' cannot be null.");
        else if (entities !== undefined)
            url_ += "entities=" + encodeURIComponent("" + entities) + "&";
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        if (sendNull === null)
            throw new Error("The parameter 'sendNull' cannot be null.");
        else if (sendNull !== undefined)
            url_ += "sendNull=" + encodeURIComponent("" + sendNull) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ResultModelOfPageOfEntry> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfPageOfEntry.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfPageOfEntry>(null as any);
    }

    post(ignoreNullProperties: boolean | undefined, entity: Entry): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/entries?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ResultModelOfString.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put(ignoreNullProperties: boolean | undefined, entity: Entry): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/entries?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/entries?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (includeModels === null)
            throw new Error("The parameter 'includeModels' cannot be null.");
        else if (includeModels !== undefined)
            url_ += "includeModels=" + encodeURIComponent("" + includeModels) + "&";
        if (includeHttpCodes === null)
            throw new Error("The parameter 'includeHttpCodes' cannot be null.");
        else if (includeHttpCodes !== undefined)
            url_ += "includeHttpCodes=" + encodeURIComponent("" + includeHttpCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/entries/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Entry): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/entries/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/entries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(id: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/entries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong> {
        let url_ = this.baseUrl + "/api/v1/data/entries/count?";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCount(_response);
        });
    }

    protected processGetCount(response: Response): Promise<ResultModelOfLong> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfLong.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfLong>(null as any);
    }
}

export interface ILocationClient {

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfLocation>;

    post(ignoreNullProperties: boolean | undefined, entity: Location): Promise<ResultModelOfObject>;

    put(ignoreNullProperties: boolean | undefined, entity: Location): Promise<ResultModelOfObject>;

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject>;

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject>;

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Location): Promise<void>;

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void>;

    delete(id: string): Promise<ResultModelOfObject>;

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong>;
}

export class LocationClient implements ILocationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfPageOfLocation> {
        let url_ = this.baseUrl + "/api/v1/data/locations?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (entities === null)
            throw new Error("The parameter 'entities' cannot be null.");
        else if (entities !== undefined)
            url_ += "entities=" + encodeURIComponent("" + entities) + "&";
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        if (sendNull === null)
            throw new Error("The parameter 'sendNull' cannot be null.");
        else if (sendNull !== undefined)
            url_ += "sendNull=" + encodeURIComponent("" + sendNull) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ResultModelOfPageOfLocation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfPageOfLocation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfPageOfLocation>(null as any);
    }

    post(ignoreNullProperties: boolean | undefined, entity: Location): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/locations?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ResultModelOfString.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put(ignoreNullProperties: boolean | undefined, entity: Location): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/locations?";
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/locations?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (includeModels === null)
            throw new Error("The parameter 'includeModels' cannot be null.");
        else if (includeModels !== undefined)
            url_ += "includeModels=" + encodeURIComponent("" + includeModels) + "&";
        if (includeHttpCodes === null)
            throw new Error("The parameter 'includeHttpCodes' cannot be null.");
        else if (includeHttpCodes !== undefined)
            url_ += "includeHttpCodes=" + encodeURIComponent("" + includeHttpCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    get(id: string, properties: string | null | undefined): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/locations/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put2(id: string, ignoreNullProperties: boolean | undefined, entity: Location): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/locations/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    patch(id: string, patchDoc: Operation[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/data/locations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(id: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v1/data/locations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    getCount(filters: { [key: string]: string; } | null | undefined): Promise<ResultModelOfLong> {
        let url_ = this.baseUrl + "/api/v1/data/locations/count?";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCount(_response);
        });
    }

    protected processGetCount(response: Response): Promise<ResultModelOfLong> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfLong.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfLong>(null as any);
    }
}

export interface IUserClient {

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined, version: string): Promise<ResultModelOfPageOfUser>;

    post(ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<ResultModelOfObject>;

    put(ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<ResultModelOfObject>;

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined, version: string): Promise<ResultModelOfObject>;

    get(id: string, properties: string | null | undefined, version: string): Promise<ResultModelOfObject>;

    put2(id: string, ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<void>;

    patch(id: string, version: string, patchDoc: Operation[] | undefined): Promise<void>;

    delete(id: string, version: string): Promise<ResultModelOfObject>;

    getCount(filters: { [key: string]: string; } | null | undefined, version: string): Promise<ResultModelOfLong>;
}

export class UserClient implements IUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(page: number | undefined, entities: number | undefined, properties: string | null | undefined, sendNull: boolean | undefined, filters: { [key: string]: string; } | null | undefined, version: string): Promise<ResultModelOfPageOfUser> {
        let url_ = this.baseUrl + "/api/v{version}/data/User?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (entities === null)
            throw new Error("The parameter 'entities' cannot be null.");
        else if (entities !== undefined)
            url_ += "entities=" + encodeURIComponent("" + entities) + "&";
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        if (sendNull === null)
            throw new Error("The parameter 'sendNull' cannot be null.");
        else if (sendNull !== undefined)
            url_ += "sendNull=" + encodeURIComponent("" + sendNull) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<ResultModelOfPageOfUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfPageOfUser.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfPageOfUser>(null as any);
    }

    post(ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v{version}/data/User?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ResultModelOfString.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put(ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v{version}/data/User?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ResultModelOfObject.fromJS(resultData201);
            return result201;
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    options(path: string | null | undefined, includeModels: boolean | undefined, includeHttpCodes: boolean | undefined, version: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v{version}/data/User?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        if (includeModels === null)
            throw new Error("The parameter 'includeModels' cannot be null.");
        else if (includeModels !== undefined)
            url_ += "includeModels=" + encodeURIComponent("" + includeModels) + "&";
        if (includeHttpCodes === null)
            throw new Error("The parameter 'includeHttpCodes' cannot be null.");
        else if (includeHttpCodes !== undefined)
            url_ += "includeHttpCodes=" + encodeURIComponent("" + includeHttpCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    get(id: string, properties: string | null | undefined, version: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v{version}/data/User/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (properties !== undefined && properties !== null)
            url_ += "properties=" + encodeURIComponent("" + properties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    put2(id: string, ignoreNullProperties: boolean | undefined, version: string, entity: User): Promise<void> {
        let url_ = this.baseUrl + "/api/v{version}/data/User/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (ignoreNullProperties === null)
            throw new Error("The parameter 'ignoreNullProperties' cannot be null.");
        else if (ignoreNullProperties !== undefined)
            url_ += "ignoreNullProperties=" + encodeURIComponent("" + ignoreNullProperties) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    patch(id: string, version: string, patchDoc: Operation[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v{version}/data/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patchDoc);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatch(_response);
        });
    }

    protected processPatch(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(id: string, version: string): Promise<ResultModelOfObject> {
        let url_ = this.baseUrl + "/api/v{version}/data/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResultModelOfObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfObject.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ResultModelOfString.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfObject>(null as any);
    }

    getCount(filters: { [key: string]: string; } | null | undefined, version: string): Promise<ResultModelOfLong> {
        let url_ = this.baseUrl + "/api/v{version}/data/User/count?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (filters !== undefined && filters !== null)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCount(_response);
        });
    }

    protected processGetCount(response: Response): Promise<ResultModelOfLong> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultModelOfLong.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ResultModelOfString.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultModelOfLong>(null as any);
    }
}

export class ResultModelOfPageOfClass implements IResultModelOfPageOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfClass | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfClass.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfClass {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfClass | undefined;
    messages?: Message[] | undefined;
}

export class PageOfClass implements IPageOfClass {
    number?: number;
    size?: number;
    total?: number;
    data?: Class[];

    constructor(data?: IPageOfClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Class.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfClass {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfClass {
    number?: number;
    size?: number;
    total?: number;
    data?: Class[];
}

export class EntityOfGuid implements IEntityOfGuid {
    id?: string;
    created!: Date;
    updated!: Date;

    constructor(data?: IEntityOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEntityOfGuid {
    id?: string;
    created: Date;
    updated: Date;
}

export class Class extends EntityOfGuid implements IClass {
    name?: string;
    short?: string;
    comment?: string;
    users?: User[] | undefined;
    tutor?: User | undefined;
    tutorId?: string | undefined;
    room?: Location | undefined;
    students?: User[] | undefined;
    studentIds?: string[] | undefined;
    studentCount?: number;

    constructor(data?: IClass) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.comment = _data["comment"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
            this.tutor = _data["tutor"] ? User.fromJS(_data["tutor"]) : <any>undefined;
            this.tutorId = _data["tutorId"];
            this.room = _data["room"] ? Location.fromJS(_data["room"]) : <any>undefined;
            if (Array.isArray(_data["students"])) {
                this.students = [] as any;
                for (let item of _data["students"])
                    this.students!.push(User.fromJS(item));
            }
            if (Array.isArray(_data["studentIds"])) {
                this.studentIds = [] as any;
                for (let item of _data["studentIds"])
                    this.studentIds!.push(item);
            }
            this.studentCount = _data["studentCount"];
        }
    }

    static override fromJS(data: any): Class {
        data = typeof data === 'object' ? data : {};
        let result = new Class();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["comment"] = this.comment;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["tutor"] = this.tutor ? this.tutor.toJSON() : <any>undefined;
        data["tutorId"] = this.tutorId;
        data["room"] = this.room ? this.room.toJSON() : <any>undefined;
        if (Array.isArray(this.students)) {
            data["students"] = [];
            for (let item of this.students)
                data["students"].push(item.toJSON());
        }
        if (Array.isArray(this.studentIds)) {
            data["studentIds"] = [];
            for (let item of this.studentIds)
                data["studentIds"].push(item);
        }
        data["studentCount"] = this.studentCount;
        super.toJSON(data);
        return data;
    }
}

export interface IClass extends IEntityOfGuid {
    name?: string;
    short?: string;
    comment?: string;
    users?: User[] | undefined;
    tutor?: User | undefined;
    tutorId?: string | undefined;
    room?: Location | undefined;
    students?: User[] | undefined;
    studentIds?: string[] | undefined;
    studentCount?: number;
}

export class User extends EntityOfGuid implements IUser {
    first?: string;
    last?: string;
    role?: RoleType;
    classId?: string | undefined;
    entryIds?: string[] | undefined;
    disciplineIds?: string[] | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.first = _data["first"];
            this.last = _data["last"];
            this.role = _data["role"];
            this.classId = _data["classId"];
            if (Array.isArray(_data["entryIds"])) {
                this.entryIds = [] as any;
                for (let item of _data["entryIds"])
                    this.entryIds!.push(item);
            }
            if (Array.isArray(_data["disciplineIds"])) {
                this.disciplineIds = [] as any;
                for (let item of _data["disciplineIds"])
                    this.disciplineIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["first"] = this.first;
        data["last"] = this.last;
        data["role"] = this.role;
        data["classId"] = this.classId;
        if (Array.isArray(this.entryIds)) {
            data["entryIds"] = [];
            for (let item of this.entryIds)
                data["entryIds"].push(item);
        }
        if (Array.isArray(this.disciplineIds)) {
            data["disciplineIds"] = [];
            for (let item of this.disciplineIds)
                data["disciplineIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IUser extends IEntityOfGuid {
    first?: string;
    last?: string;
    role?: RoleType;
    classId?: string | undefined;
    entryIds?: string[] | undefined;
    disciplineIds?: string[] | undefined;
}

export enum RoleType {
    Student = "Student",
    Tutor = "Tutor",
    CampaignManager = "CampaignManager",
    CampaignJudge = "CampaignJudge",
}

export class Location extends EntityOfGuid implements ILocation {
    name?: string;
    short?: string;
    description?: string;
    classIds?: string[] | undefined;
    disciplineIds?: string[] | undefined;

    constructor(data?: ILocation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.description = _data["description"];
            if (Array.isArray(_data["classIds"])) {
                this.classIds = [] as any;
                for (let item of _data["classIds"])
                    this.classIds!.push(item);
            }
            if (Array.isArray(_data["disciplineIds"])) {
                this.disciplineIds = [] as any;
                for (let item of _data["disciplineIds"])
                    this.disciplineIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["description"] = this.description;
        if (Array.isArray(this.classIds)) {
            data["classIds"] = [];
            for (let item of this.classIds)
                data["classIds"].push(item);
        }
        if (Array.isArray(this.disciplineIds)) {
            data["disciplineIds"] = [];
            for (let item of this.disciplineIds)
                data["disciplineIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ILocation extends IEntityOfGuid {
    name?: string;
    short?: string;
    description?: string;
    classIds?: string[] | undefined;
    disciplineIds?: string[] | undefined;
}

export class Message implements IMessage {
    errorMessage?: string | undefined;
    errorType?: ErrorResult | undefined;
    errorSeverity?: Severity | undefined;

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["error.message"];
            this.errorType = _data["error.type"];
            this.errorSeverity = _data["error.severity"];
        }
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error.message"] = this.errorMessage;
        data["error.type"] = this.errorType;
        data["error.severity"] = this.errorSeverity;
        return data;
    }
}

export interface IMessage {
    errorMessage?: string | undefined;
    errorType?: ErrorResult | undefined;
    errorSeverity?: Severity | undefined;
}

export enum ErrorResult {
    InternalException = "InternalException",
    InvalidModel = "InvalidModel",
    InvalidCredentials = "InvalidCredentials",
    InvalidToken = "InvalidToken",
    InvalidRole = "InvalidRole",
    InvalidUser = "InvalidUser",
    InvalidPassword = "InvalidPassword",
    InvalidEmail = "InvalidEmail",
    InvalidUsername = "InvalidUsername",
    InvalidOldPassword = "InvalidOldPassword",
    InvalidNewPassword = "InvalidNewPassword",
    InvalidModelState = "InvalidModelState",
    PasswordChangeFailed = "PasswordChangeFailed",
    AccountLocked = "AccountLocked",
    UserNotFound = "UserNotFound",
    UserCreationFailed = "UserCreationFailed",
    RoleCreationFailed = "RoleCreationFailed",
    Validation = "Validation",
    InvalidId = "InvalidId",
}

export enum Severity {
    Verbose = "Verbose",
    Debug = "Debug",
    Information = "Information",
    Warning = "Warning",
    Error = "Error",
    Fatal = "Fatal",
}

export class ResultModelOfObject implements IResultModelOfObject {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: any | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfObject {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfObject {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: any | undefined;
    messages?: Message[] | undefined;
}

export class ResultModelOfString implements IResultModelOfString {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: string | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfString {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: string | undefined;
    messages?: Message[] | undefined;
}

export class OperationBase implements IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;

    constructor(data?: IOperationBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
        }
    }

    static fromJS(data: any): OperationBase {
        data = typeof data === 'object' ? data : {};
        let result = new OperationBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        return data;
    }
}

export interface IOperationBase {
    path?: string | undefined;
    op?: string | undefined;
    from?: string | undefined;
}

export class Operation extends OperationBase implements IOperation {
    value?: any | undefined;

    constructor(data?: IOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOperation extends IOperationBase {
    value?: any | undefined;
}

export class ResultModelOfLong implements IResultModelOfLong {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: number;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfLong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfLong {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfLong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfLong {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: number;
    messages?: Message[] | undefined;
}

export class ResultModelOfPageOfDiscipline implements IResultModelOfPageOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfDiscipline | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfDiscipline.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfDiscipline {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfDiscipline | undefined;
    messages?: Message[] | undefined;
}

export class PageOfDiscipline implements IPageOfDiscipline {
    number?: number;
    size?: number;
    total?: number;
    data?: Discipline[];

    constructor(data?: IPageOfDiscipline) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Discipline.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfDiscipline {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfDiscipline();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfDiscipline {
    number?: number;
    size?: number;
    total?: number;
    data?: Discipline[];
}

export class Discipline extends EntityOfGuid implements IDiscipline {
    name?: string;
    short?: string;
    description?: string;
    judgeIds?: string[] | undefined;
    managerId?: string | undefined;
    locationId?: Location | undefined;
    entryIds?: string[] | undefined;

    constructor(data?: IDiscipline) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.short = _data["short"];
            this.description = _data["description"];
            if (Array.isArray(_data["judgeIds"])) {
                this.judgeIds = [] as any;
                for (let item of _data["judgeIds"])
                    this.judgeIds!.push(item);
            }
            this.managerId = _data["managerId"];
            this.locationId = _data["locationId"] ? Location.fromJS(_data["locationId"]) : <any>undefined;
            if (Array.isArray(_data["entryIds"])) {
                this.entryIds = [] as any;
                for (let item of _data["entryIds"])
                    this.entryIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): Discipline {
        data = typeof data === 'object' ? data : {};
        let result = new Discipline();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["short"] = this.short;
        data["description"] = this.description;
        if (Array.isArray(this.judgeIds)) {
            data["judgeIds"] = [];
            for (let item of this.judgeIds)
                data["judgeIds"].push(item);
        }
        data["managerId"] = this.managerId;
        data["locationId"] = this.locationId ? this.locationId.toJSON() : <any>undefined;
        if (Array.isArray(this.entryIds)) {
            data["entryIds"] = [];
            for (let item of this.entryIds)
                data["entryIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IDiscipline extends IEntityOfGuid {
    name?: string;
    short?: string;
    description?: string;
    judgeIds?: string[] | undefined;
    managerId?: string | undefined;
    locationId?: Location | undefined;
    entryIds?: string[] | undefined;
}

export class ResultModelOfPageOfEntry implements IResultModelOfPageOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfEntry | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfEntry.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfEntry {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfEntry | undefined;
    messages?: Message[] | undefined;
}

export class PageOfEntry implements IPageOfEntry {
    number?: number;
    size?: number;
    total?: number;
    data?: Entry[];

    constructor(data?: IPageOfEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Entry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfEntry {
    number?: number;
    size?: number;
    total?: number;
    data?: Entry[];
}

export class Entry extends EntityOfGuid implements IEntry {
    studentId?: string | undefined;
    disciplineId?: string | undefined;
    score?: number;
    note?: string;

    constructor(data?: IEntry) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.studentId = _data["studentId"];
            this.disciplineId = _data["disciplineId"];
            this.score = _data["score"];
            this.note = _data["note"];
        }
    }

    static override fromJS(data: any): Entry {
        data = typeof data === 'object' ? data : {};
        let result = new Entry();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["studentId"] = this.studentId;
        data["disciplineId"] = this.disciplineId;
        data["score"] = this.score;
        data["note"] = this.note;
        super.toJSON(data);
        return data;
    }
}

export interface IEntry extends IEntityOfGuid {
    studentId?: string | undefined;
    disciplineId?: string | undefined;
    score?: number;
    note?: string;
}

export class ResultModelOfPageOfLocation implements IResultModelOfPageOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfLocation | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfLocation.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfLocation {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfLocation | undefined;
    messages?: Message[] | undefined;
}

export class PageOfLocation implements IPageOfLocation {
    number?: number;
    size?: number;
    total?: number;
    data?: Location[];

    constructor(data?: IPageOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Location.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfLocation {
    number?: number;
    size?: number;
    total?: number;
    data?: Location[];
}

export class ResultModelOfPageOfUser implements IResultModelOfPageOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfUser | undefined;
    messages?: Message[] | undefined;

    constructor(data?: IResultModelOfPageOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.error = _data["error"];
            this.message = _data["message"];
            this.data = _data["data"] ? PageOfUser.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultModelOfPageOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new ResultModelOfPageOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["error"] = this.error;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultModelOfPageOfUser {
    success?: boolean;
    error?: boolean;
    message?: string | undefined;
    data?: PageOfUser | undefined;
    messages?: Message[] | undefined;
}

export class PageOfUser implements IPageOfUser {
    number?: number;
    size?: number;
    total?: number;
    data?: User[];

    constructor(data?: IPageOfUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.size = _data["size"];
            this.total = _data["total"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageOfUser {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["size"] = this.size;
        data["total"] = this.total;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageOfUser {
    number?: number;
    size?: number;
    total?: number;
    data?: User[];
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

// This file uses TypeScript 4.5 syntax